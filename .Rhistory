# Strong Positive relationship between year and resale price
# 3.
storey <- data |> group_by(storey) |> summarise(avg = mean(resale_price))
ggplot(data=storey, aes(x=storey, y=avg)) + geom_point()
# Strong Positive relationship between storey and resale price
# 4.
lease_rem <- data |> group_by(lease_rem) |> summarise(avg = mean(resale_price))
ggplot(data=lease_rem, aes(x=lease_rem, y=avg)) + geom_point()
# No clear relationship between lease remaining and resale price
# 5.
pri_dist <- data |> group_by(pri_dist) |> summarise(avg = mean(resale_price)) |> filter(pri_dist<2)
ggplot(data=pri_dist, aes(x=pri_dist, y=avg)) + geom_point()
# No clear relationship between pri sch distance and resale price
# 6.
sec_dist <- data |> group_by(sec_dist) |> summarise(avg = mean(resale_price)) |> filter(sec_dist<2)
ggplot(data=sec_dist, aes(x=sec_dist, y=avg)) + geom_point()
# No clear relationship between sec sch distance and resale price
# 7.
mall_dist <- data |> group_by(mall_dist) |> summarise(avg = mean(resale_price)) |> filter(mall_dist<2)
ggplot(data=mall_dist, aes(x=mall_dist, y=avg)) + geom_point()
# Weak positive relationship between sec sch distance and resale price on prices > 500,000
# 8.
mrt_dist <- data |> group_by(mrt_dist) |> summarise(avg = mean(resale_price)) |> filter(mrt_dist<2)
ggplot(data=mrt_dist, aes(x=mrt_dist, y=avg)) + geom_point()
# Weak positive relationship between mrt distance and resale price on prices > 500,000
CI <- 1.96 #at a 95% confidence leve
dummy_town <- data |>
group_by(town) |>
summarise(count = n(), avg = mean(resale_price), sd = sd(resale_price)) |>
mutate(se = sd/sqrt(count)) |>
collect()
dummy_town |>
ggplot(aes(x = town, y = avg)) +
geom_point(size = 2) +
geom_errorbar(
aes(ymin = avg-CI*se, ymax = avg+CI*se),
width = 0.1
) + geom_hline(
yintercept = mean(dummy_town$avg),
linetype= "dashed"
)
dummy_flat <- data |>
group_by(flat_type) |>
summarise(count = n(), avg = mean(resale_price), sd = sd(resale_price)) |>
mutate(se = sd/sqrt(count)) |>
collect()
dummy_flat |>
ggplot(aes(x = flat_type, y = avg)) +
geom_point(size = 2) +
geom_errorbar(
aes(ymin = avg-CI*se, ymax = avg+CI*se),
width = 0.1
) + geom_hline(
yintercept = mean(dummy_flat$avg),
linetype= "dashed"
)
data_split <- data |>
sdf_random_split(training = 0.8, test = 0.2, seed = 1337)
split_train <- data_split$training
split_test <- data_split$test
fit1 <- split_train |> ml_linear_regression(formula = resale_price ~ .)
summary(fit1)
fit1_sum <- ml_evaluate(fit1, dataset = split_test)
fit1_sum$mean_squared_error^0.5
# R squared value of 0.8634
split_trans_train <- split_train |>
mutate(resale_price_lg = log(resale_price),
pri_dist_lg = log(pri_dist),
sec_dist_lg = log(sec_dist),
mall_dist_sqrt = sqrt(mall_dist),
mrt_dist_lg = log(mrt_dist)) |>
select(-c(resale_price, pri_dist, sec_dist, mall_dist, mrt_dist))
split_trans_test <- split_test |>
mutate(resale_price_lg = log(resale_price),
pri_dist_lg = log(pri_dist),
sec_dist_lg = log(sec_dist),
mall_dist_sqrt = sqrt(mall_dist),
mrt_dist_lg = log(mrt_dist)) |>
select(-c(resale_price, pri_dist, sec_dist, mall_dist, mrt_dist))
fit2 <- split_trans_train |> ml_linear_regression(formula = resale_price_lg~.)
summary(fit2)
fit2_sum <- ml_evaluate(fit2, split_trans_test)
fit2_sum$mean_squared_error^0.5
# R squared value of 0.893
fit1_sum$root_mean_squared_error
fit2_sum$root_mean_squared_error
fit1 <- split_train |> ml_linear_regression(formula = resale_price ~ .)
summary(fit1)
fit1_sum <- ml_evaluate(fit1, dataset = split_test)
fit1_sum$root_mean_squared_error
# R squared value of 0.8634
fit1_sum$r2adj
fit1 <- split_train |> ml_linear_regression(formula = resale_price ~ .)
summary(fit1)
fit1_sum <- ml_evaluate(fit1, dataset = split_test)
fit1_sum$root_mean_squared_error
fit1_sum$r2adj
# R squared value of 0.8634
split_trans_train <- split_train |>
mutate(resale_price_lg = log(resale_price),
pri_dist_lg = log(pri_dist),
sec_dist_lg = log(sec_dist),
mall_dist_sqrt = sqrt(mall_dist),
mrt_dist_lg = log(mrt_dist)) |>
select(-c(resale_price, pri_dist, sec_dist, mall_dist, mrt_dist))
split_trans_test <- split_test |>
mutate(resale_price_lg = log(resale_price),
pri_dist_lg = log(pri_dist),
sec_dist_lg = log(sec_dist),
mall_dist_sqrt = sqrt(mall_dist),
mrt_dist_lg = log(mrt_dist)) |>
select(-c(resale_price, pri_dist, sec_dist, mall_dist, mrt_dist))
fit2 <- split_trans_train |> ml_linear_regression(formula = resale_price_lg~.)
summary(fit2)
fit2_sum <- ml_evaluate(fit2, split_trans_test)
fit2_sum$root_mean_squared_error
fit2_sum$r2adj
# R squared value of 0.893
fit3 <- split_trans_train |> ml_linear_regression(formula = resale_price_lg~ town + year + flat_type + storey + area_sqm + lease_start + lease_rem+sec_dist_lg + pri_dist_lg + mall_dist_sqrt + mrt_dist_lg + flat_type*area_sqm + lease_start*lease_rem)
summary(fit3)
fit3_sum <- ml_evaluate(fit3, split_trans_test)
fit3_sum$mean_squared_error^0.5
# R squared value of 0.8967 after including interaction terms between lease_start, lease_rem and area_sqm, flat_type
fit3 <- split_trans_train |> ml_linear_regression(formula = resale_price_lg~ town + year + flat_type + storey + area_sqm + lease_start + lease_rem+sec_dist_lg + pri_dist_lg + mall_dist_sqrt + mrt_dist_lg + flat_type*area_sqm + lease_start*lease_rem)
summary(fit3)
fit3_sum <- ml_evaluate(fit3, split_trans_test)
fit3_sum$root_mean_squared_error
fit3_sum$r2adj
# R squared value of 0.8967 after including interaction terms between lease_start, lease_rem and area_sqm, flat_type
hdb_reloaded <- ml_load(sc, path="hdb_cv_model")
hdb_reloaded <- ml_load(sc, path="hdb_cv_model")
hdb_reloaded <- ml_load(sc, path="hdb_cv_model")
hdb_reloaded <- ml_load(sc, path="hdb_cv_model")
split_train
hdb_reloaded <- ml_load(sc, path="hdb_cv_model")
library(sparklyr)
hdb_reloaded <- ml_load(sc, path="hdb_cv_model")
sql <-
"
SELECT
year, storey, area_sqm, lease_start, lease_rem, LOG(resale_price) as resale_price_lg, LOG(pri_dist) as pri_dist_lg, LOG(sec_dist) as sec_dist_lg, SQRT(mall_dist) as mall_dist_sqrt, LOG(mrt_dist) as mrt_dist_lg, town, flat_type
FROM __THIS__
"
pipeline <- ml_pipeline(sc)|>
ft_sql_transformer(statement = sql) |>
ft_r_formula(formula = resale_price_lg ~ town + year + flat_type + storey + area_sqm + lease_start + lease_rem + sec_dist_lg + pri_dist_lg + mall_dist_sqrt + mrt_dist_lg + flat_type*area_sqm + lease_start*lease_rem) |>
ml_linear_regression()
# pipeline
# split_trans_train
pipeline_model  <- ml_fit(pipeline, split_train)
cv <- ml_cross_validator(
sc,
estimator = pipeline,
estimator_param_maps = list(
linear_regression = list(
elastic_net_param = c(0), #c(0, 0.25, 0.75, 1)
reg_param = c(0.001)#seq(from = 0.001, to = 1, length.out = 101)
)
),
evaluator = ml_regression_evaluator(
sc,
label_col = "resale_price_lg"
),
num_folds = 10,
parallelism = 10,
seed = 1337
)
cv_model <- ml_fit(cv, split_train)
cv_model
cv_mod_eval <- ml_validation_metrics(cv_model)
cv_mod_eval |> arrange(rmse)
cv_model$best_model
sql <-
"
SELECT
year, storey, area_sqm, lease_start, lease_rem, LOG(resale_price) as resale_price_lg, LOG(pri_dist) as pri_dist_lg, LOG(sec_dist) as sec_dist_lg, SQRT(mall_dist) as mall_dist_sqrt, LOG(mrt_dist) as mrt_dist_lg, town, flat_type
FROM __THIS__
"
pipeline <- ml_pipeline(sc)|>
ft_sql_transformer(statement = sql) |>
ft_r_formula(formula = resale_price_lg ~ town + year + flat_type + storey + area_sqm + lease_start + lease_rem + sec_dist_lg + pri_dist_lg + mall_dist_sqrt + mrt_dist_lg + flat_type*area_sqm + lease_start*lease_rem) |>
ml_linear_regression()
# pipeline
# split_trans_train
pipeline_model  <- ml_fit(pipeline, split_train)
cv <- ml_cross_validator(
sc,
estimator = pipeline,
estimator_param_maps = list(
linear_regression = list(
elastic_net_param = c(0), #c(0, 0.25, 0.75, 1)
reg_param = c(0, 0.001)#seq(from = 0.001, to = 1, length.out = 101)
)
),
evaluator = ml_regression_evaluator(
sc,
label_col = "resale_price_lg"
),
num_folds = 10,
parallelism = 10,
seed = 1337
)
cv_model <- ml_fit(cv, split_train)
cv_model
cv_mod_eval <- ml_validation_metrics(cv_model)
cv_mod_eval |> arrange(rmse)
cv_model$best_model
ml_save(pipeline, path = "spark_pipeline", overwrite = TRUE)
ml_save(cv_model$best_model, path = "hdb_cv_model", overwrite = TRUE)
hdb_reloaded <- ml_load(sc, path="hdb_cv_model")
library(plumber)
plumb(file = "hdb_plumber.R") |>
pr_run(port = 8000)
hdb_reloaded <- ml_load(sc, path="hdb_cv_model")
library(sparklyr)
library(dplyr)
config <- spark_config()
config$`sparklyr.shell.driver-memory` <- "6G"
config$`sparklyr.shell.executor-memory` <- "6G"
sc <- spark_connect(master = "local", config = config, version = "3.3.0")
hdb_reloaded <- ml_load(sc, path="hdb_cv_model")
new_data <- data.frame(
year = 2017,
town = "ANG MO KIO",
flat_type = "2 ROOM",
storey = 2,
area_sqm = 44	,
lease_start = 1980,
lease_rem = 66,
resale_price = 0,
pri_dist = 0.33978106,
sec_dist = 0.3196699,
mall_dist = 0.18583900,
mrt_dist = 0.47962721
)
new_data_r <- copy_to(sc, new_data, overwrite = TRUE)
ml_transform(hdb_reloaded, new_data_r) |>
pull(prediction) |>
exp()
ml_transform(hdb_reloaded, new_data_r) |>
pull(prediction) |>
exp()
library(plumber)
plumb(file = "hdb_plumber.R") |>
pr_run(port = 8000)
library(sparklyr)
library(dplyr)
config <- spark_config()
config$`sparklyr.shell.driver-memory` <- "6G"
config$`sparklyr.shell.executor-memory` <- "6G"
sc <- spark_connect(master = "local", config = config, version = "3.3.0")
hdb_reloaded <- ml_load(sc, path="hdb_cv_model")
hdb_reloaded
hdb_reloaded$stages
library(plumber)
plumb(file = "hdb_plumber.R") |>
pr_run(port = 8000)
library(plumber)
plumb(file = "hdb_plumber_2.R") |>
pr_run(port = 8000)
toString(12)
library(plumber)
plumb(file = "hdb_plumber_2.R") |>
pr_run(port = 8000)
library(plumber)
plumb(file = "hdb_plumber_2.R") |>
pr_run(port = 8000)
cv_model$best_model
hdb_reloaded <- ml_load(sc, path = "hdb_cv_model")
library(sparklyr); library(dplyr)
sc <- spark_connect(master = "local", config = config, version = "3.3.0")
library(sparklyr); library(dplyr)
config <- spark_config()
config$`sparklyr.shell.driver-memory` <- "6G"
config$`sparklyr.shell.executor-memory` <- "6G"
sc <- spark_connect(master = "local", config = config, version = "3.3.0")
hdb_reloaded <- ml_load(sc, path = "hdb_cv_model")
library(sparklyr); library(dplyr)
config <- spark_config()
config$`sparklyr.shell.driver-memory` <- "6G"
config$`sparklyr.shell.executor-memory` <- "6G"
sc <- spark_connect(master = "local", config = config, version = "3.3.0")
hdb_reloaded <- ml_load(sc, path = "hdb_cv_model")
```
hdb_reloaded <- ml_load(sc, path = "hdb_cv_model")
hdb_reloaded
library(sparklyr)
sc <- spark_connect(master = "local", version = "3.3.0")
wines <- spark_read_csv(
sc,
name = "red_wines",
path = "wines.csv")
sql <-
"SELECT
quality, alcohol, volatile_acidity, sulphates
FROM __THIS__;"
wines |>
ft_sql_transformer(statement = sql)
df <- wines |>
select(quality, alcohol, volatile_acidity, sulphates)
ft_dplyr_transformer(sc, tbl = df) |>
ml_param("statement")
wines |> ft_dplyr_transformer(df)
pipeline_model_reloaded <- ml_load(sc, path="my_spark_model")
pipeline_model_reloaded$stage_uids
pipeline_model_reloaded$stages
pipeline_model_reloaded$stages[2]
pipeline_model_reloaded$stages[3]
pipeline_model_reloaded$stages[1]
pipeline_model_reloaded$stages[2]
ml_load(sc, path="my_spark_model")$stages[2]
data <- spark_read_parquet(sc, path = "data/combined_data.parquet")
library(sparklyr)
library(dplyr)
config <- spark_config()
config$`sparklyr.shell.driver-memory` <- "6G"
config$`sparklyr.shell.executor-memory` <- "6G"
sc <- spark_connect(master = "local", config = config, version = "3.3.0")
data <- spark_read_parquet(sc, path = "data/combined_data.parquet")
data_split <- data |>
sdf_random_split(training = 0.8, test = 0.2, seed = 1337)
split_train <- data_split$training
split_test <- data_split$test
split_trans_train <- split_train |>
mutate(resale_price_lg = log(resale_price),
pri_dist_lg = log(pri_dist),
sec_dist_lg = log(sec_dist),
mall_dist_sqrt = sqrt(mall_dist),
mrt_dist_lg = log(mrt_dist)) |>
select(-c(resale_price, pri_dist, sec_dist, mall_dist, mrt_dist))
split_trans_test <- split_test |>
mutate(resale_price_lg = log(resale_price),
pri_dist_lg = log(pri_dist),
sec_dist_lg = log(sec_dist),
mall_dist_sqrt = sqrt(mall_dist),
mrt_dist_lg = log(mrt_dist)) |>
select(-c(resale_price, pri_dist, sec_dist, mall_dist, mrt_dist))
fit3 <- split_trans_train |> ml_linear_regression(formula = resale_price_lg~ town + year + flat_type + storey + area_sqm + lease_start + lease_rem+sec_dist_lg + pri_dist_lg + mall_dist_sqrt + mrt_dist_lg + flat_type*area_sqm + lease_start*lease_rem)
summary(fit3)
fit3_sum <- ml_evaluate(fit3, split_trans_test)
fit3_sum$root_mean_squared_error
fit3_sum$r2adj
# R squared value of 0.8967 after including interaction terms between lease_start, lease_rem and area_sqm, flat_type
fit3 <- split_trans_train |> ml_linear_regression(formula = resale_price_lg~ town + year + flat_type + storey + area_sqm + lease_start + lease_rem+sec_dist_lg + pri_dist_lg + mall_dist_sqrt + mrt_dist_lg + flat_type*area_sqm + lease_start*lease_rem)
summary(fit3)
fit3_sum <- ml_evaluate(fit3, split_trans_test)
fit3_sum$root_mean_squared_error
fit3_sum$r2adj
# R squared value of 0.8967 after including interaction terms between lease_start, lease_rem and area_sqm, flat_type
fit3 <- split_trans_train |> ml_linear_regression(formula = resale_price_lg~ town + year + flat_type + storey + area_sqm + lease_start + lease_rem+sec_dist_lg + pri_dist_lg + mall_dist_sqrt + mrt_dist_lg + flat_type*area_sqm + lease_start*lease_rem)
summary(fit3)
fit3_sum <- ml_evaluate(fit3, split_trans_test)
fit3_sum$root_mean_squared_error
fit3_sum$r2adj
# R squared value of 0.8967 after including interaction terms between lease_start, lease_rem and area_sqm, flat_type
fit1 <- split_train |> ml_linear_regression(formula = resale_price ~ .)
summary(fit1)
fit1_sum <- ml_evaluate(fit1, dataset = split_test)
fit1_sum$root_mean_squared_error
fit1_sum$r2adj
# R squared value of 0.8634
fit1 <- split_train |> ml_linear_regression(formula = resale_price ~ .)
summary(fit1)
fit1_sum <- ml_evaluate(fit1, dataset = split_test)
fit1_sum$root_mean_squared_error
fit1_sum$r2adj
# R squared value of 0.8634
fit1 <- split_train |> ml_linear_regression(formula = resale_price ~ .)
summary(fit1)
fit1_sum <- ml_evaluate(fit1, dataset = split_test)
fit1_sum$root_mean_squared_error
fit1_sum$r2adj
# R squared value of 0.8634
fit2 <- split_trans_train |> ml_linear_regression(formula = resale_price_lg~.)
summary(fit2)
fit2_sum <- ml_evaluate(fit2, split_trans_test)
fit2_sum$root_mean_squared_error
fit2_sum$r2adj
# R squared value of 0.893
library(corrr)
library(corrr)
data_cor  <- select(data, -c(flat_type, town))
data_cor
#remove flat type from corelation plot as its categorical
# cor(data_cor, use = "complete.obs")
data_cor |>
correlate(use = "pairwise.complete.obs", method = "pearson") |>
shave(upper = TRUE) |>
rplot(colours = c("indianred2", "black", "skyblue1"))
library(corrr)
data_cor  <- select(data, -c(flat_type, town))
data_cor
#remove flat type from corelation plot as its categorical
# cor(data_cor, use = "complete.obs")
data_cor |>
correlate(use = "pairwise.complete.obs", method = "pearson") |>
shave(upper = TRUE) |>
rplot(colours = c("indianred2","skyblue1"))
library(corrr)
data_cor  <- select(data, -c(flat_type, town))
data_cor
#remove flat type from corelation plot as its categorical
# cor(data_cor, use = "complete.obs")
data_cor |>
correlate(use = "pairwise.complete.obs", method = "pearson") |>
shave(upper = TRUE)
library(corrr)
data_cor  <- select(data, -c(flat_type, town))
data_cor
#remove flat type from corelation plot as its categorical
# cor(data_cor, use = "complete.obs")
data_cor |>
correlate(use = "pairwise.complete.obs", method = "pearson") |>
shave(upper = FALSE) |>
rplot(colours = c("indianred2", "white", "skyblue1"))
library(corrr)
data_cor  <- select(data, -c(flat_type, town))
data_cor
#remove flat type from corelation plot as its categorical
# cor(data_cor, use = "complete.obs")
data_cor |>
correlate(use = "pairwise.complete.obs", method = "pearson") |>
shave(upper = TRUE) |>
rplot(colours = c("indianred2", "white", "skyblue1"))
library(corrr)
data_cor  <- select(data, -c(flat_type, town))
data_cor
#remove flat type from corelation plot as its categorical
# cor(data_cor, use = "complete.obs")
data_cor |>
correlate(use = "pairwise.complete.obs", method = "pearson") |>
shave(upper = TRUE) |>
rplot(colours = c("indianred2", "black", "skyblue1"))
year <- data |>
group_by(year) |>
summarise(avg_resale_price = mean(resale_price))
ggplot(data=year, aes(x=year, y=avg_resale_price)) + geom_line()
library(ggplot2)
year <- data |>
group_by(year) |>
summarise(avg_resale_price = mean(resale_price))
ggplot(data=year, aes(x=year, y=avg_resale_price)) + geom_line()
library(ggplot2)
# 1. year
#ggplot(data=data, aes(x=year, y=resale_price)) + geom_point() # Use raster plot inside
year <- data |>
group_by(year) |>
summarise(avg_resale_price = mean(resale_price))
ggplot(data=year, aes(x=year, y=avg_resale_price)) + geom_line()
# Positive relationship between year and resale price
# 2.
no_rooms <- table(data$flat_type)
# freq_rooms <- as.data.frame(freq)
# freq_rooms
rooms <- data |> group_by(flat_type) |> summarise(avg_resale_price = mean(resale_price))
ggplot(data=rooms, aes(x=flat_type, y=avg_resale_price)) + geom_point()
# Strong Positive relationship between year and resale price
# 3.
storey <- data |> group_by(storey) |> summarise(avg_resale_price = mean(resale_price))
ggplot(data=storey, aes(x=storey, y=avg_resale_price)) + geom_point()
# Strong Positive relationship between storey and resale price
# 4.
lease_rem <- data |> group_by(lease_rem) |> summarise(avg_resale_price = mean(resale_price))
ggplot(data=lease_rem, aes(x=lease_rem, y=avg_resale_price)) + geom_point()
# No clear relationship between lease remaining and resale price
# 5.
pri_dist <- data |> group_by(pri_dist) |> summarise(avg_resale_price = mean(resale_price)) |> filter(pri_dist<2)
ggplot(data=pri_dist, aes(x=pri_dist, y=avg_resale_price)) + geom_point()
# No clear relationship between pri sch distance and resale price
# 6.
sec_dist <- data |> group_by(sec_dist) |> summarise(avg_resale_price = mean(resale_price)) |> filter(sec_dist<2)
ggplot(data=sec_dist, aes(x=sec_dist, y=avg_resale_price)) + geom_point()
# No clear relationship between sec sch distance and resale price
# 7.
mall_dist <- data |> group_by(mall_dist) |> summarise(avg_resale_price = mean(resale_price)) |> filter(mall_dist<2)
ggplot(data=mall_dist, aes(x=mall_dist, y=avg_resale_price)) + geom_point()
# Weak positive relationship between sec sch distance and resale price on prices > 500,000
# 8.
mrt_dist <- data |> group_by(mrt_dist) |> summarise(avg_resale_price = mean(resale_price)) |> filter(mrt_dist<2)
ggplot(data=mrt_dist, aes(x=mrt_dist, y=avg_resale_price)) + geom_point()
# Weak positive relationship between mrt distance and resale price on prices > 500,000
CI <- 1.96 #at a 95% confidence leve
dummy_town <- data |>
group_by(town) |>
summarise(count = n(), avg_resale_price = mean(resale_price), sd = sd(resale_price)) |>
mutate(se = sd/sqrt(count)) |>
collect()
dummy_town |>
ggplot(aes(x = town, y = avg_resale_price)) +
geom_point(size = 2) +
geom_errorbar(
aes(ymin = avg_resale_price-CI*se, ymax = avg_resale_price+CI*se),
width = 0.1
) + geom_hline(
yintercept = mean(dummy_town$avg_resale_price),
linetype= "dashed"
)
dummy_flat <- data |>
group_by(flat_type) |>
summarise(count = n(), avg_resale_price = mean(resale_price), sd = sd(resale_price)) |>
mutate(se = sd/sqrt(count)) |>
collect()
dummy_flat |>
ggplot(aes(x = flat_type, y = avg_resale_price)) +
geom_point(size = 2) +
geom_errorbar(
aes(ymin = avg_resale_price-CI*se, ymax = avg_resale_price+CI*se),
width = 0.1
) + geom_hline(
yintercept = mean(dummy_flat$avg_resale_price),
linetype= "dashed"
)
